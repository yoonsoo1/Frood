{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction onAppleButtonPress() {\n  var appleAuthRequestResponse, credentialState;\n  return _regeneratorRuntime.async(function onAppleButtonPress$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(appleAuth.performRequest({\n            requestedOperation: appleAuth.Operation.LOGIN,\n            requestedScopes: [appleAuth.Scope.EMAIL, appleAuth.Scope.FULL_NAME]\n          }));\n\n        case 2:\n          appleAuthRequestResponse = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(appleAuth.getCredentialStateForUser(appleAuthRequestResponse.user));\n\n        case 5:\n          credentialState = _context.sent;\n\n          if (credentialState === appleAuth.State.AUTHORIZED) {}\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction Login() {\n  return _jsx(View, {\n    children: _jsx(Button, {\n      onPress: function onPress() {\n        return onAppleButtonPress();\n      }\n    })\n  });\n}\n\nexport default Login;","map":{"version":3,"sources":["/Users/yoonsoonam/scope-s22/Frood/Login.js"],"names":["React","onAppleButtonPress","appleAuth","performRequest","requestedOperation","Operation","LOGIN","requestedScopes","Scope","EMAIL","FULL_NAME","appleAuthRequestResponse","getCredentialStateForUser","user","credentialState","State","AUTHORIZED","Login"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAGA,SAAeC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAE2CC,SAAS,CAACC,cAAV,CAAyB;AAC9DC,YAAAA,kBAAkB,EAAEF,SAAS,CAACG,SAAV,CAAoBC,KADsB;AAE9DC,YAAAA,eAAe,EAAE,CAACL,SAAS,CAACM,KAAV,CAAgBC,KAAjB,EAAwBP,SAAS,CAACM,KAAV,CAAgBE,SAAxC;AAF6C,WAAzB,CAF3C;;AAAA;AAEUC,UAAAA,wBAFV;AAAA;AAAA,2CASkCT,SAAS,CAACU,yBAAV,CAAoCD,wBAAwB,CAACE,IAA7D,CATlC;;AAAA;AASUC,UAAAA,eATV;;AAYI,cAAIA,eAAe,KAAKZ,SAAS,CAACa,KAAV,CAAgBC,UAAxC,EAAoD,CAEnD;;AAdL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASC,KAAT,GAAiB;AACf,SACE,KAAC,IAAD;AAAA,cAEE,KAAC,MAAD;AACE,MAAA,OAAO,EAAE;AAAA,eAAMhB,kBAAkB,EAAxB;AAAA;AADX;AAFF,IADF;AAQD;;AAED,eAAegB,KAAf","sourcesContent":["import React from 'react';\nimport { View, Button } from 'react-native';\n\nasync function onAppleButtonPress() {\n    // performs login request\n    const appleAuthRequestResponse = await appleAuth.performRequest({\n      requestedOperation: appleAuth.Operation.LOGIN,\n      requestedScopes: [appleAuth.Scope.EMAIL, appleAuth.Scope.FULL_NAME],\n    });\n  \n    // get current authentication state for user\n    // /!\\ This method must be tested on a real device. On the iOS simulator it always throws an error.\n    const credentialState = await appleAuth.getCredentialStateForUser(appleAuthRequestResponse.user);\n  \n    // use credentialState response to ensure the user is authenticated\n    if (credentialState === appleAuth.State.AUTHORIZED) {\n      // user is authenticated\n    }\n}\n\nfunction Login() {\n  return (\n    <View>\n        \n      <Button\n        onPress={() => onAppleButtonPress()}\n      />\n    </View>\n  )\n}\n\nexport default Login"]},"metadata":{},"sourceType":"module"}