{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { AppleButton } from '@invertase/react-native-apple-authentication';\nimport { appleAuth } from '@invertase/react-native-apple-authentication';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction onAppleButtonPress() {\n  var appleAuthRequestResponse, credentialState;\n  return _regeneratorRuntime.async(function onAppleButtonPress$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(appleAuth.performRequest({\n            requestedOperation: appleAuth.Operation.LOGIN,\n            requestedScopes: [appleAuth.Scope.EMAIL, appleAuth.Scope.FULL_NAME]\n          }));\n\n        case 2:\n          appleAuthRequestResponse = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(appleAuth.getCredentialStateForUser(appleAuthRequestResponse.user));\n\n        case 5:\n          credentialState = _context.sent;\n\n          if (credentialState === appleAuth.State.AUTHORIZED) {}\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction Login() {\n  return _jsx(View, {\n    children: _jsx(AppleButton, {\n      buttonStyle: AppleButton.Style.WHITE,\n      buttonType: AppleButton.Type.SIGN_IN,\n      style: {\n        width: 160,\n        height: 45\n      },\n      onPress: function onPress() {\n        return onAppleButtonPress();\n      }\n    })\n  });\n}\n\nexport default Login;","map":{"version":3,"sources":["/Users/yoonsoonam/scope-s22/Frood/Login.js"],"names":["React","AppleButton","appleAuth","onAppleButtonPress","performRequest","requestedOperation","Operation","LOGIN","requestedScopes","Scope","EMAIL","FULL_NAME","appleAuthRequestResponse","getCredentialStateForUser","user","credentialState","State","AUTHORIZED","Login","Style","WHITE","Type","SIGN_IN","width","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,WAAT,QAA4B,8CAA5B;AACA,SAASC,SAAT,QAA0B,8CAA1B;;;AAEA,SAAeC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAE2CD,SAAS,CAACE,cAAV,CAAyB;AAC9DC,YAAAA,kBAAkB,EAAEH,SAAS,CAACI,SAAV,CAAoBC,KADsB;AAE9DC,YAAAA,eAAe,EAAE,CAACN,SAAS,CAACO,KAAV,CAAgBC,KAAjB,EAAwBR,SAAS,CAACO,KAAV,CAAgBE,SAAxC;AAF6C,WAAzB,CAF3C;;AAAA;AAEUC,UAAAA,wBAFV;AAAA;AAAA,2CASkCV,SAAS,CAACW,yBAAV,CAAoCD,wBAAwB,CAACE,IAA7D,CATlC;;AAAA;AASUC,UAAAA,eATV;;AAYI,cAAIA,eAAe,KAAKb,SAAS,CAACc,KAAV,CAAgBC,UAAxC,EAAoD,CAEnD;;AAdL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASC,KAAT,GAAiB;AACf,SACE,KAAC,IAAD;AAAA,cACE,KAAC,WAAD;AACE,MAAA,WAAW,EAAEjB,WAAW,CAACkB,KAAZ,CAAkBC,KADjC;AAEE,MAAA,UAAU,EAAEnB,WAAW,CAACoB,IAAZ,CAAiBC,OAF/B;AAGE,MAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,GADF;AAELC,QAAAA,MAAM,EAAE;AAFH,OAHT;AAOE,MAAA,OAAO,EAAE;AAAA,eAAMrB,kBAAkB,EAAxB;AAAA;AAPX;AADF,IADF;AAaD;;AAED,eAAee,KAAf","sourcesContent":["import React from 'react';\nimport { View } from 'react-native';\nimport { AppleButton } from '@invertase/react-native-apple-authentication';\nimport { appleAuth } from '@invertase/react-native-apple-authentication';\n\nasync function onAppleButtonPress() {\n    // performs login request\n    const appleAuthRequestResponse = await appleAuth.performRequest({\n      requestedOperation: appleAuth.Operation.LOGIN,\n      requestedScopes: [appleAuth.Scope.EMAIL, appleAuth.Scope.FULL_NAME],\n    });\n  \n    // get current authentication state for user\n    // /!\\ This method must be tested on a real device. On the iOS simulator it always throws an error.\n    const credentialState = await appleAuth.getCredentialStateForUser(appleAuthRequestResponse.user);\n  \n    // use credentialState response to ensure the user is authenticated\n    if (credentialState === appleAuth.State.AUTHORIZED) {\n      // user is authenticated\n    }\n}\n\nfunction Login() {\n  return (\n    <View>\n      <AppleButton\n        buttonStyle={AppleButton.Style.WHITE}\n        buttonType={AppleButton.Type.SIGN_IN}\n        style={{\n          width: 160, // You must specify a width\n          height: 45, // You must specify a height\n        }}\n        onPress={() => onAppleButtonPress()}\n      />\n    </View>\n  )\n}\n\nexport default Login"]},"metadata":{},"sourceType":"module"}